package org.atcraftmc.ofmlite.ui;

import org.atcraftmc.ofmlite.Instance;
import org.atcraftmc.ofmlite.InstanceListener;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public final class TunnelTerminalUI implements InstanceListener {
    private final Instance instance;
    private final Map<String, Color> ansiColorMap = new HashMap<>();
    private final StyledDocument document;
    private final MainWindowUI parent;
    private JTextPane terminal;
    private JButton toggleButton;
    private JButton restartButton;
    private JPanel _root;
    private JLabel tunnelInfo;

    public TunnelTerminalUI(Instance instance, MainWindowUI parent) {
        this.instance = instance;
        this.parent = parent;
        this.restartButton.addActionListener(actionEvent -> {
            this.instance.terminate();
            this.instance.start();
        });
        this.toggleButton.addActionListener(actionEvent -> {
            if (this.instance.isRunning()) {
                this.instance.terminate();
            } else {
                this.instance.start();
            }
            updateUI();
        });

        this.instance.setListener(this);
        this.document = this.terminal.getStyledDocument();

        initAnsiColorMap();

        for (var s : instance.getQueue().getContents()) {
            append(s);
        }

        updateUI();
    }

    private void updateUI() {
        var b = this.instance.isRunning();
        this.restartButton.setEnabled(b);
        this.toggleButton.setText(b ? "关闭" : "启动");
        this.parent.update();
        this.tunnelInfo.setText(this.instance.toString());
    }

    private void append(String line) {
        line += "\n";

        String[] parts = line.split("\u001B\\[");
        for (String part : parts) {
            if (part.isEmpty()) {
                continue;
            }

            int colorEndIndex = part.indexOf("m");
            if (colorEndIndex == -1) {
                appendToOutput(part, Color.WHITE);
            } else {
                // 提取 ANSI 颜色码
                String colorCode = part.substring(0, colorEndIndex);
                //Color color = ansiColorMap.getOrDefault(colorCode, Color.WHITE);

                // 提取文本并应用颜色
                String text = part.substring(colorEndIndex + 1);
                appendToOutput(text, Color.WHITE);
            }
        }
    }

    private void initAnsiColorMap() {
        ansiColorMap.put("0", Color.WHITE); // Reset
        ansiColorMap.put("30", Color.BLACK);
        ansiColorMap.put("31", Color.RED);
        ansiColorMap.put("32", Color.GREEN);
        ansiColorMap.put("33", Color.YELLOW);
        ansiColorMap.put("34", Color.BLUE);
        ansiColorMap.put("35", Color.MAGENTA);
        ansiColorMap.put("36", Color.CYAN);
        ansiColorMap.put("37", Color.WHITE);
        ansiColorMap.put("1;30", Color.DARK_GRAY);
        ansiColorMap.put("1;31", Color.RED.darker());
        ansiColorMap.put("1;32", Color.GREEN.darker());
        ansiColorMap.put("1;33", Color.ORANGE);
        ansiColorMap.put("1;34", Color.BLUE.darker());
        ansiColorMap.put("1;35", Color.MAGENTA.darker());
        ansiColorMap.put("1;36", Color.CYAN.darker());
        ansiColorMap.put("1;37", Color.LIGHT_GRAY);
    }

    private void appendToOutput(String text, Color color) {
        SwingUtilities.invokeLater(() -> {
            try {
                SimpleAttributeSet style = new SimpleAttributeSet();
                StyleConstants.setForeground(style, color);
                document.insertString(document.getLength(), text, style);
                this.terminal.setCaretPosition(document.getLength()); // 自动滚动到底部
            } catch (BadLocationException e) {
                e.printStackTrace();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        _root = new JPanel();
        _root.setLayout(new GridBagLayout());
        restartButton = new JButton();
        restartButton.setBackground(new Color(-14145237));
        restartButton.setText("重启");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 10, 5, 10);
        _root.add(restartButton, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 5;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        _root.add(scrollPane1, gbc);
        terminal = new JTextPane();
        terminal.setEditable(false);
        scrollPane1.setViewportView(terminal);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        _root.add(spacer1, gbc);
        toggleButton = new JButton();
        toggleButton.setText("开启");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        _root.add(toggleButton, gbc);
        tunnelInfo = new JLabel();
        tunnelInfo.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        _root.add(tunnelInfo, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return _root;
    }

    @Override
    public void acceptCommandLine(Instance instance, String commandLine) {
        this.append(commandLine);
    }

    @Override
    public void onInstanceStateChange(Instance instance, boolean newState, int code) {
        this.updateUI();
    }
}
