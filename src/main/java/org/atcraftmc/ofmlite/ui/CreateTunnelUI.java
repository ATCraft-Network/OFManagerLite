package org.atcraftmc.ofmlite.ui;

import org.atcraftmc.ofmlite.Instance;
import org.atcraftmc.ofmlite.SharedContext;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Objects;

public final class CreateTunnelUI extends JDialog {
    private static final String DEFAULT_TUNNEL_ID_HINT = "[必填]请输入服务商(OpenFRP?)提供的隧道ID";
    private static final String DEFAULT_USER_TOKEN_HINT = "[必填]请输入服务商(OpenFRP?)提供的用户Token";
    private static final String DEFAULT_TUNNEL_NAME_HINT = "[必填]请输入一个用于标识的隧道ID";
    private final MainWindowUI parent;
    private JPanel contentPane;
    private JButton confirmButton;
    private JButton cancelButton;
    private JTextField tf_token;
    private JTextField tf_tunnelId;
    private JTextField tf_tunnelName;
    private JCheckBox op_autoStart;
    private boolean edit;

    public CreateTunnelUI(MainWindowUI parent, Instance origin) {
        if (origin != null) {
            if (origin.isRunning()) {
                origin.terminate();
            }

            this.tf_tunnelName.setEditable(false);
        }

        this.edit = origin != null;

        this.parent = parent;
        setContentPane(this.contentPane);
        setModal(true);
        getRootPane().setDefaultButton(confirmButton);

        // 点击 X 时调用 onCancel()
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // 遇到 ESCAPE 时调用 onCancel()
        this.contentPane.registerKeyboardAction(
                e -> onCancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        SharedContext.loadConfig();
        this.tf_tunnelId.setText(origin != null ? origin.getId() : DEFAULT_TUNNEL_ID_HINT);
        this.tf_token.setText(origin != null ? origin.getToken() : "{#global_token}");
        this.tf_tunnelName.setText(origin != null ? origin.getName() : DEFAULT_TUNNEL_NAME_HINT);
        this.op_autoStart.setSelected(origin == null || origin.isAutoStart());

        this.confirmButton.addActionListener(e -> onOK());
        this.cancelButton.addActionListener(e -> onCancel());

    }

    public static void open(MainWindowUI mainWindowUI, Instance instance) {
        CreateTunnelUI dialog = new CreateTunnelUI(mainWindowUI, instance);
        dialog.setResizable(false);
        dialog.setTitle("创建隧道");
        dialog.setSize(500, 350);
        dialog.setVisible(true);
    }

    private Instance verify() {
        var id = this.tf_tunnelId.getText();
        var name = this.tf_tunnelName.getText();
        var token = this.tf_token.getText();

        if (id.isEmpty() || Objects.equals(id, DEFAULT_TUNNEL_ID_HINT)) {
            JOptionPane.showMessageDialog(null, "请输入隧道ID", "错误", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if (token.isEmpty() || Objects.equals(token, DEFAULT_USER_TOKEN_HINT)) {
            JOptionPane.showMessageDialog(null, "请输入用户Token", "错误", JOptionPane.ERROR_MESSAGE);
            return null;
        }
        if (name.isEmpty() || Objects.equals(name, DEFAULT_TUNNEL_NAME_HINT)) {
            JOptionPane.showMessageDialog(null, "请输入本地隧道名称", "错误", JOptionPane.ERROR_MESSAGE);
            return null;
        }

        if (!this.edit) {
            if (SharedContext.INSTANCES.values().stream().anyMatch((i) -> Objects.equals(i.getId(), id))) {
                JOptionPane.showMessageDialog(null, "隧道 %s 已存在".formatted(id), "错误", JOptionPane.ERROR_MESSAGE);
                return null;
            }
            if (SharedContext.INSTANCES.containsKey(name)) {
                JOptionPane.showMessageDialog(null, "本地隧道名称 %s 已存在".formatted(name), "错误", JOptionPane.ERROR_MESSAGE);
                return null;
            }
        }

        return new Instance(id, token, name, this.op_autoStart.isSelected());
    }

    private void onOK() {
        var instance = verify();

        if (instance == null) {
            return;
        }

        SharedContext.INSTANCES.put(instance.getName(), instance);
        SharedContext.saveInstances();

        this.parent.update();

        dispose();
    }

    private void onCancel() {
        dispose();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridBagLayout());
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel1, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(panel2, gbc);
        confirmButton = new JButton();
        confirmButton.setBorderPainted(true);
        confirmButton.setContentAreaFilled(true);
        confirmButton.setDoubleBuffered(false);
        confirmButton.setEnabled(true);
        confirmButton.setText("完成");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(confirmButton, gbc);
        cancelButton = new JButton();
        cancelButton.setText("取消");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel2.add(cancelButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(spacer2, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        contentPane.add(panel3, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("用户Token");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 0, 0, 5);
        panel3.add(label1, gbc);
        tf_token = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 0);
        panel3.add(tf_token, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("隧道ID");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel3.add(label2, gbc);
        tf_tunnelId = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 0);
        panel3.add(tf_tunnelId, gbc);
        final JLabel label3 = new JLabel();
        label3.setText("1.请先查询你的用户Token和id再做创建");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 5;
        gbc.weighty = 1.0;
        gbc.anchor = GridBagConstraints.SOUTHEAST;
        panel3.add(label3, gbc);
        final JLabel label4 = new JLabel();
        label4.setText("2.一旦创建隧道，不要再向任何人分发您安装的这个软件实例");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 6;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.insets = new Insets(0, 0, 10, 0);
        panel3.add(label4, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel3.add(spacer5, gbc);
        tf_tunnelName = new JTextField();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 0);
        panel3.add(tf_tunnelName, gbc);
        final JLabel label5 = new JLabel();
        label5.setText("隧道名称[本地]");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        gbc.insets = new Insets(0, 0, 0, 5);
        panel3.add(label5, gbc);
        op_autoStart = new JCheckBox();
        op_autoStart.setText("自启动");
        op_autoStart.setToolTipText("实例将会在软件启动时自启动");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 4;
        gbc.anchor = GridBagConstraints.EAST;
        panel3.add(op_autoStart, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        contentPane.add(spacer6, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
