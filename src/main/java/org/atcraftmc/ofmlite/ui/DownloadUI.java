package org.atcraftmc.ofmlite.ui;

import org.atcraftmc.ofmlite.AsyncDownload;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.zip.ZipInputStream;

public class DownloadUI {
    private final File dest;
    private final String url;

    private JPanel root;
    private JProgressBar downloadProgress;
    private JLabel operation;

    public DownloadUI(File dest, String url) {
        this.dest = dest;
        this.url = url;
    }

    public static void open(File dest, String url) {
        dest.getParentFile().mkdirs();

        var ui = new DownloadUI(dest, url);
        var frame = new JFrame("下载...");
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.setSize(400, 100);
        frame.setLocationRelativeTo(null);
        frame.setContentPane(ui.$$$getRootComponent$$$());
        frame.setVisible(true);
        frame.setAlwaysOnTop(true);
        frame.setResizable(false);

        // 开始下载任务
        new Thread(() -> {
            try {
                ui.downloadFileWithProgress();
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(frame, "成功下载: " + dest, "完成!", JOptionPane.INFORMATION_MESSAGE);
                    frame.dispose();
                });
            } catch (Exception e) {
                SwingUtilities.invokeLater(() -> {
                    JOptionPane.showMessageDialog(frame, "发生错误: " + e.getMessage(), "错误!", JOptionPane.ERROR_MESSAGE);
                    frame.dispose();
                });
            }
        }).start();
    }

    private void downloadFileWithProgress() throws Exception {
        var cache = new File(this.dest.getParent(), "cache-" + System.currentTimeMillis() + ".zip");

        var worked = new AtomicLong(0);
        var lastUpdate = System.currentTimeMillis();

        AsyncDownload.download(this.url, cache.getAbsolutePath(), (append, size) -> {
            worked.addAndGet(append);

            var time = System.currentTimeMillis();
            if (time - lastUpdate > 50) {
                var workedSize = worked.intValue();

                int progress = (int) ((((double) workedSize) / size) * 100);

                SwingUtilities.invokeLater(() -> {
                    this.downloadProgress.setValue(progress);
                    this.operation.setText(workedSize / 1000f + " / " + size / 1000f + "KB");
                });
            }
        });

        this.operation.setText("正在解压...");

        try (var zipInputStream = new ZipInputStream(new FileInputStream(cache))) {
            var entry = zipInputStream.getNextEntry();
            if (entry == null) {
                throw new RuntimeException("Unknown zip file!");
            }

            try (FileOutputStream tgt = new FileOutputStream(this.dest)) {
                byte[] buf = new byte[131072];
                int length;
                while ((length = zipInputStream.read(buf)) != -1) {
                    tgt.write(buf, 0, length);
                }
            }
        }

        cache.delete();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new GridBagLayout());
        final JPanel spacer1 = new JPanel();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.VERTICAL;
        root.add(spacer3, gbc);
        downloadProgress = new JProgressBar();
        downloadProgress.setValue(100);
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(downloadProgress, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        root.add(spacer4, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("下载");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.anchor = GridBagConstraints.WEST;
        root.add(label1, gbc);
        operation = new JLabel();
        operation.setText("正在初始化下载...");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.anchor = GridBagConstraints.WEST;
        root.add(operation, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

}
