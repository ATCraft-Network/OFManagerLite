package org.atcraftmc.ofmlite.ui;

import org.atcraftmc.ofmlite.Instance;
import org.atcraftmc.ofmlite.SharedContext;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public final class MainWindowUI {
    private JPanel root;
    private JPanel tunnelTerminalWrapper;
    private JButton createTunnelButton;
    private JButton optionsButton;
    private JList<Instance> tunnelList;
    private JButton editTunnelButton;
    private JButton deleteTunnelButton;
    private Instance selected;

    public MainWindowUI() {
        $$$setupUI$$$();
        this.createTunnelButton.addActionListener(actionEvent -> CreateTunnelUI.open(this, null));
        this.editTunnelButton.addActionListener(actionEvent -> CreateTunnelUI.open(this, this.selected));
        this.tunnelList.addListSelectionListener(e -> setTerminalContext(this.tunnelList.getSelectedValue()));
        this.optionsButton.addActionListener(actionEvent -> {
            OptionsUI dialog = new OptionsUI();
            dialog.setResizable(false);
            dialog.setTitle("选项");
            dialog.setSize(500, 350);
            dialog.setVisible(true);
        });
        this.tunnelList.setCellRenderer((jList, instance, i, b, b1) -> new TunnelInfoCard(instance).$$$getRootComponent$$$());

        SharedContext.loadInstances();

        this.update();
        this.deleteTunnelButton.addActionListener(actionEvent -> {
            var instance = this.selected;
            var msg = "你确定要删除这条隧道吗?[此操作不可撤销]\n" + "隧道: " + instance.toString();

            int result = JOptionPane.showConfirmDialog(this.root, msg, "删除隧道", JOptionPane.YES_NO_OPTION);

            // 处理用户选择
            if (result == JOptionPane.YES_OPTION) {
                if (this.selected.isRunning()) {
                    this.selected.terminate();
                }
                SharedContext.INSTANCES.remove(instance.getName());
                SharedContext.saveInstances();

                update();
            }
        });
    }

    void update() {
        this.editTunnelButton.setEnabled(this.selected != null);
        this.deleteTunnelButton.setEnabled(this.selected != null);

        this.tunnelTerminalWrapper.updateUI();

        var model = new AbstractListModel<Instance>() {
            private final List<Instance> list = new ArrayList<>();

            @Override
            public int getSize() {
                return this.list.size();
            }

            @Override
            public Instance getElementAt(int i) {
                return this.list.get(i);
            }

            public void add(Instance instance) {
                this.list.add(instance);
            }

            public List<Instance> getList() {
                return list;
            }
        };
        var instances = SharedContext.INSTANCES;

        for (var s : instances.keySet()) {
            model.add(instances.get(s));
        }

        model.getList().sort((i1, i2) -> i1.getName().compareToIgnoreCase(i2.getName()));

        this.tunnelList.setModel(model);
        this.tunnelList.updateUI();
    }

    public void setTerminalContext(Instance i) {
        if (i == this.selected) {
            return;
        }

        if (i == null) {
            return;
        }

        this.selected = i;
        this.tunnelTerminalWrapper.removeAll();
        this.tunnelTerminalWrapper.add(new TunnelTerminalUI(i, this).$$$getRootComponent$$$());

        update();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        root = new JPanel();
        root.setLayout(new BorderLayout(0, 0));
        final JSplitPane splitPane1 = new JSplitPane();
        splitPane1.setContinuousLayout(false);
        splitPane1.setDividerLocation(348);
        splitPane1.setEnabled(true);
        splitPane1.setOneTouchExpandable(false);
        splitPane1.setOrientation(1);
        splitPane1.setResizeWeight(0.0);
        root.add(splitPane1, BorderLayout.CENTER);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setEnabled(true);
        splitPane1.setRightComponent(panel1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(10, 10));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel1.add(panel2, gbc);
        final JLabel label1 = new JLabel();
        label1.setHorizontalAlignment(0);
        label1.setHorizontalTextPosition(0);
        label1.setText("控制台");
        panel2.add(label1, BorderLayout.CENTER);
        tunnelTerminalWrapper = new JPanel();
        tunnelTerminalWrapper.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(tunnelTerminalWrapper, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        tunnelTerminalWrapper.add(panel3, BorderLayout.CENTER);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.gridwidth = 2;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel3.add(spacer2, gbc);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel3.add(spacer3, gbc);
        final JTextPane textPane1 = new JTextPane();
        textPane1.setEditable(false);
        textPane1.setEnabled(true);
        textPane1.setText("欢迎来到OFMLite!\n点击[添加隧道]创建实例\n或从左侧隧道列表选择一个实例\n\n本软件旨在为高级用户提供管理多条隧道的工具\n非熟悉Frpc的用户建议使用其他启动器");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panel3.add(textPane1, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weighty = 0.8;
        gbc.fill = GridBagConstraints.VERTICAL;
        panel3.add(spacer4, gbc);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridBagLayout());
        splitPane1.setLeftComponent(panel4);
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new BorderLayout(10, 10));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(10, 0, 10, 0);
        panel4.add(panel5, gbc);
        final JLabel label2 = new JLabel();
        label2.setHorizontalAlignment(0);
        label2.setHorizontalTextPosition(0);
        label2.setText("隧道列表");
        panel5.add(label2, BorderLayout.CENTER);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new BorderLayout(0, 3));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weighty = 0.02;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.ipadx = 1;
        gbc.ipady = 10;
        gbc.insets = new Insets(10, 10, 0, 10);
        panel4.add(panel6, gbc);
        createTunnelButton = new JButton();
        createTunnelButton.setText("创建隧道");
        createTunnelButton.setVerticalAlignment(0);
        panel6.add(createTunnelButton, BorderLayout.CENTER);
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weighty = 0.02;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5, 10, 10, 10);
        panel4.add(panel7, gbc);
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 0, 0, 5);
        panel7.add(panel8, gbc);
        optionsButton = new JButton();
        optionsButton.setText("选项");
        optionsButton.setVerticalAlignment(0);
        panel8.add(optionsButton, BorderLayout.CENTER);
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.BOTH;
        panel7.add(panel9, gbc);
        editTunnelButton = new JButton();
        editTunnelButton.setHorizontalAlignment(0);
        editTunnelButton.setText("编辑隧道");
        editTunnelButton.setVerticalAlignment(0);
        panel9.add(editTunnelButton, BorderLayout.CENTER);
        final JPanel panel10 = new JPanel();
        panel10.setLayout(new BorderLayout(0, 0));
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(0, 5, 0, 0);
        panel7.add(panel10, gbc);
        deleteTunnelButton = new JButton();
        deleteTunnelButton.setHorizontalAlignment(0);
        deleteTunnelButton.setText("删除隧道");
        deleteTunnelButton.setVerticalAlignment(0);
        panel10.add(deleteTunnelButton, BorderLayout.CENTER);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel4.add(scrollPane1, gbc);
        tunnelList = new JList();
        scrollPane1.setViewportView(tunnelList);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return root;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
